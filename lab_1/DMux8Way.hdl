/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            etc.
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:

    //optimized

    /**
   * DMux4Way(in=in, sel=sel[1..2], a=t1, b=t2, c=t3, d=t4);
   * DMux(in=t1, sel=sel[0], a=a, b=b);
   * DMux(in=t2, sel=sel[0], a=c, b=d);
   * DMux(in=t3, sel=sel[0], a=e, b=f);
   * DMux(in=t4, sel=sel[0], a=g, b=h);
    */

    //not optimized

    Not  (in=sel[0], out=nselA);
    Not  (in=sel[1], out=nselB);
    Not  (in=sel[2], out=nselC);
    And4 (a=in, b=nselC, c=nselB, d=nselA, out=a);
    And4 (a=in, b=nselC, c=nselB, d=sel[0], out=b);
    And4 (a=in, b=nselC, c=sel[1], d=nselA, out=c);
    And4 (a=in, b=nselC, c=sel[1], d=sel[0], out=d);
    And4 (a=in, b=sel[2], c=nselB, d=nselA, out=e);
    And4 (a=in, b=sel[2], c=nselB, d=sel[0], out=f);
    And4 (a=in, b=sel[2], c=sel[1], d=nselA, out=g);
    And4 (a=in, b=sel[2], c=sel[1], d=sel[0], out=h);
}
